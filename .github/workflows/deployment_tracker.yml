name: Track Merges into beta-release (Linked PR Titles)

on:
  pull_request:
    types:
      - closed
    branches:
      - beta-release
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: read

jobs:
  track_prs:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Workspace and Git Directory
        run: |
          echo "--- Verifying Checkout ---"
          echo "Current directory: $(pwd)"
          ls -la ${{ github.workspace }}
          if [ -d "${{ github.workspace }}/.git" ]; then echo ".git directory FOUND."; else echo ".git directory NOT FOUND."; fi
          echo "--- End Verification ---"

      - name: Get merged PRs into beta-release and format as Markdown links
        id: get_prs
        run: |
          echo "Attempting gh pr list command..."
          RAW_PRS=$(gh pr list --base beta-release --state merged --json title,url -L 100 -R ${{ github.repository }})
          FORMATTED_PRS=$(echo "$RAW_PRS" | jq -r '.[] | "[\(.title)](\(.url))"')

          if [ -z "$FORMATTED_PRS" ]; then
            echo "No merged PRs found to report."
            FORMATTED_PRS=""
          else
            echo "Formatted PR Links:"
            echo "$FORMATTED_PRS"
          fi

          echo "PRS<<EOF" >> $GITHUB_ENV
          echo "$FORMATTED_PRS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create an Issue with the list of PR Links
        if: env.PRS != ''
        id: create_issue
        run: |
          ISSUE_TITLE="PRs Merged into beta-release"
          ISSUE_BODY=$(printf "Merged PRs:\n\n%s" "${PRS}")

          echo "Creating issue with title: $ISSUE_TITLE"
          echo "--- Issue Body Start ---"
          echo "${ISSUE_BODY}"
          echo "--- Issue Body End ---"

          printf "%s" "${ISSUE_BODY}" | gh issue create --title "$ISSUE_TITLE" --body-file - -R ${{ github.repository }}

      - name: Get Created Issue Number
        id: get_issue_number
        run: |
          echo "Getting latest issue number..."
          ISSUE_NUMBER=$(gh issue list --limit 1 --state open --json number --jq '.[0].number' -R ${{ github.repository }})
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT

      - name: Notify QA Members from qa_members.txt
        if: env.PRS != ''
        run: |
          if [ ! -f .github/qa_members.txt ]; then
            echo "No QA member file found."
            exit 1
          fi

          MENTION_LIST=$(sed 's/^/@/' .github/qa_members.txt | paste -sd ' ' -)
          MESSAGE="${MENTION_LIST} This PR merge to beta-release requires QA testing. Please review the listed changes."

          echo "Commenting with QA message: $MESSAGE"
          gh issue comment "${{ env.ISSUE_NUMBER }}" --body "${MESSAGE}" -R ${{ github.repository }}

      - name: Add needs-qa label to the issue
        if: env.ISSUE_NUMBER != ''
        run: |
          gh issue edit "${{ env.ISSUE_NUMBER }}" --add-label "needs-qa" -R ${{ github.repository }}
